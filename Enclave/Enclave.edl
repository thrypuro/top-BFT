/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    
    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
    
    trusted {
        public void ecall_root_size(uint32_t L_size, uint32_t R_size);
        public void ecall_generate_PublicKey([out]uint8_t publicKey[64]);
        public void ecall_root_sharedKey([in]uint8_t publicKey[64]);
        public void ecall_setLeaderPublicKey([in] uint8_t publicKey[64]);
        public void ecall_setNodeKey([in]uint8_t publicKey[64], int serial_index, int view_index);
        public void ecall_leader_issueSecret(int Serial_num, [out, size=len] char * encrypted_data, [out] uint8_t signature[64],size_t len);
        public void ecall_request_secret([in,size=len] char * all_data, size_t len,[in] uint8_t signature[64], [in] uint8_t encrypted_data[52], [in] uint8_t iv[12], [in] uint8_t tag[16]);
        public void ecall_hash([in,size=src_len] char * p_src, uint32_t src_len, [out] uint8_t p_hash[32]);
        public void ecall_call_counter([in,size=size_len]char * secret, uint32_t size_len,[in]uint8_t signature[64], int Serial_num, int counter_p, int view_num_p);
        public void ecall_verify_counter( [in] uint8_t hash[32] ,[in] uint8_t signature[64],
                                               uint32_t leader_view,uint32_t leader_counter,
                                              [in] uint8_t encrypted_data[52], [in] uint8_t iv[12], [in] uint8_t tag[16]
                                              ,[out] uint8_t secret_share[8], uint8_t verify
                                              );
        public void ecall_sign([in] uint8_t * p_data, uint32_t data_len,[out] uint8_t * p_signature);

    };

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);
    };

};
